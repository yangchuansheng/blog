<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Envoy 中文指南</title><link>https://fuckcloudnative.io/envoy-handbook/</link><description>Recent content on Envoy 中文指南</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;{year}. &lt;a href='https://fuckcloudnative.io'>云原生实验室&lt;/a></copyright><lastBuildDate>Sun, 26 Jan 2020 04:15:05 +0900</lastBuildDate><atom:link href="https://fuckcloudnative.io/envoy-handbook/index.xml" rel="self" type="application/rss+xml"/><item><title>xDS REST 和 gRPC 协议详解</title><link>https://fuckcloudnative.io/envoy-handbook/docs/basics/envoy-xds-protocol/</link><pubDate>Thu, 18 Jun 2020 12:19:59 +0800</pubDate><guid>https://fuckcloudnative.io/envoy-handbook/docs/basics/envoy-xds-protocol/</guid><description>Envoy 通过查询文件或管理服务器来动态发现资源。这些发现服务及其相应的 API 被统称为 xDS。Envoy 通过订阅（subscription）方式来获取资</description></item><item><title>安装</title><link>https://fuckcloudnative.io/envoy-handbook/docs/gettingstarted/setup/</link><pubDate>Sat, 02 May 2020 15:27:54 +0800</pubDate><guid>https://fuckcloudnative.io/envoy-handbook/docs/gettingstarted/setup/</guid><description>GetEnvoy Envoy 本身是很难编译的，需要使用到项目构建工具 Bazel，为了解决这个问题，Tetrate 的工程师（包括 Envoy 的核心贡献者和维护者）发起了 GetEnvoy 项目，</description></item><item><title>从 Nginx 迁移到 Envoy Proxy</title><link>https://fuckcloudnative.io/envoy-handbook/docs/practice/migrating-from-nginx-to-envoy/</link><pubDate>Sat, 02 May 2020 15:27:54 +0800</pubDate><guid>https://fuckcloudnative.io/envoy-handbook/docs/practice/migrating-from-nginx-to-envoy/</guid><description>本章节主题是如何从 Nginx 迁移到 Envoy Proxy，你可以将任何以前的经验和对 Nginx 的理解直接应用于 Envoy Proxy 中。 主要内容： 配置 Envoy Proxy 的 server 配置项 配置 Envoy Proxy 以将流量代理</description></item><item><title>Envoy 介绍</title><link>https://fuckcloudnative.io/envoy-handbook/docs/overview/overview/</link><pubDate>Sat, 02 May 2020 14:04:05 +0800</pubDate><guid>https://fuckcloudnative.io/envoy-handbook/docs/overview/overview/</guid><description>Envoy 是专为大型现代 SOA（面向服务架构）架构设计的 L7 代理和通信总线，体积小，性能高。它的诞生源于以下理念： 对应用程序而言，网络应该是透明的。当</description></item><item><title>监听器</title><link>https://fuckcloudnative.io/envoy-handbook/docs/basics/listeners/</link><pubDate>Fri, 08 May 2020 12:19:59 +0800</pubDate><guid>https://fuckcloudnative.io/envoy-handbook/docs/basics/listeners/</guid><description>监听器（Listener） 监听器（Listener）就是 Envoy 的监听地址，可以是端口或 Unix Socket。Envoy 在单个进程中支持任意数量的监听器</description></item><item><title>快速开始</title><link>https://fuckcloudnative.io/envoy-handbook/docs/gettingstarted/quick-start/</link><pubDate>Sat, 02 May 2020 15:27:54 +0800</pubDate><guid>https://fuckcloudnative.io/envoy-handbook/docs/gettingstarted/quick-start/</guid><description>安装完成后，可以通过下面的例子快速体验 Envoy 的功能。 本文的示例使用 Envoy 作为边缘代理，根据不同的路由配置将请求转发到百度和 Bing。指定请求头 host: baidu.com 时</description></item><item><title>Envoy 架构与配置结构</title><link>https://fuckcloudnative.io/envoy-handbook/docs/gettingstarted/architecture/</link><pubDate>Sat, 02 May 2020 15:27:54 +0800</pubDate><guid>https://fuckcloudnative.io/envoy-handbook/docs/gettingstarted/architecture/</guid><description>Envoy 架构 Envoy 的架构如图所示： Envoy 接收到请求后，会先走 FilterChain，通过各种 L3/L4/L7 Filter 对请求进行微处理，然后再路由到指定的集群，并通过负载均衡获</description></item><item><title>Sidecar 模式</title><link>https://fuckcloudnative.io/envoy-handbook/docs/overview/sidecar/</link><pubDate>Sat, 02 May 2020 15:24:11 +0800</pubDate><guid>https://fuckcloudnative.io/envoy-handbook/docs/overview/sidecar/</guid><description>在云环境下，技术栈可以是多种多样的。那么如何能够将这些异构的服务组件串联起来，成为了服务治理的一个重大课题。而 Sidecar 模式为服务治理，提供了一种解</description></item></channel></rss>